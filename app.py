import streamlit as st
import pandas as pd
import random
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import folium
from streamlit_folium import st_folium
from datetime import datetime, timedelta
import numpy as np
import streamlit as st
st.write("App started successfully!")
import streamlit as st
st.write("App starting on port 8501...")
# Page configuration
st.set_page_config(
    page_title="üåæ –ê–≥—Ä–æ-–ü–æ–≥–æ–¥–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
    layout="wide",
    page_icon="üå§Ô∏è",
    initial_sidebar_state="collapsed"
)

# Custom CSS with natural color palette
st.markdown("""
<style>
    /* Import Google Fonts */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    /* Root variables for natural color scheme */
    :root {
        --primary-green: #2E8B57;
        --secondary-green: #90EE90;
        --earth-brown: #D2B48C;
        --sky-blue: #87CEEB;
        --deep-blue: #4682B4;
        --warning-orange: #FF8C00;
        --danger-red: #DC143C;
        --success-green: #32CD32;
        --text-dark: #2F4F4F;
        --bg-light: #F0F8FF;
        --card-shadow: rgba(46, 139, 87, 0.1);
    }
    
    /* Main app styling */
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 3rem;
        font-family: 'Inter', sans-serif;
    }
    
    /* Beautiful gradient header */
    .header-container {
        background: linear-gradient(135deg, var(--primary-green) 0%, var(--sky-blue) 50%, var(--earth-brown) 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 8px 32px var(--card-shadow);
        animation: fadeInUp 1s ease-out;
    }
    
    .header-title {
        color: white;
        font-size: 3rem;
        font-weight: 700;
        margin: 0;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    
    .header-subtitle {
        color: rgba(255,255,255,0.9);
        font-size: 1.2rem;
        margin-top: 0.5rem;
        font-weight: 400;
    }
    
    /* Custom metric cards */
    .metric-card {
        background: linear-gradient(135deg, white 0%, var(--bg-light) 100%);
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 4px 20px var(--card-shadow);
        border-left: 5px solid var(--primary-green);
        margin: 1rem 0;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 30px var(--card-shadow);
    }
    
    .metric-card.success {
        border-left-color: var(--success-green);
    }
    
    .metric-card.warning {
        border-left-color: var(--warning-orange);
    }
    
    .metric-card.danger {
        border-left-color: var(--danger-red);
    }
    
    /* Enhanced buttons */
    .stButton > button {
        background: linear-gradient(135deg, var(--primary-green) 0%, var(--deep-blue) 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(46, 139, 87, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(46, 139, 87, 0.4);
        background: linear-gradient(135deg, var(--deep-blue) 0%, var(--primary-green) 100%);
    }
    
    /* Tab styling */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
        background-color: transparent;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        background: linear-gradient(135deg, white 0%, var(--bg-light) 100%);
        border-radius: 25px;
        color: var(--text-dark);
        font-weight: 500;
        border: 2px solid transparent;
        transition: all 0.3s ease;
    }
    
    .stTabs [data-baseweb="tab"]:hover {
        border-color: var(--primary-green);
        transform: translateY(-2px);
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, var(--primary-green) 0%, var(--deep-blue) 100%);
        color: white !important;
        border-color: var(--primary-green);
    }
    
    /* Information panels */
    .stExpander {
        border: 2px solid var(--secondary-green);
        border-radius: 15px;
        box-shadow: 0 4px 15px var(--card-shadow);
        margin: 1rem 0;
    }
    
    .stExpander > div > div > div > div {
        background: linear-gradient(135deg, white 0%, var(--bg-light) 100%);
    }
    
    /* Footer styling */
    .footer {
        background: linear-gradient(135deg, var(--text-dark) 0%, var(--primary-green) 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-top: 3rem;
        text-align: center;
        color: white;
    }
    
    .footer-content {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        gap: 2rem;
        margin-bottom: 1rem;
    }
    
    .footer-section {
        flex: 1;
        min-width: 250px;
    }
    
    .footer-title {
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--secondary-green);
    }
    
    /* Animations */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }
    
    .pulse-animation {
        animation: pulse 2s infinite;
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
        .header-title {
            font-size: 2rem;
        }
        
        .header-subtitle {
            font-size: 1rem;
        }
        
        .metric-card {
            padding: 1rem;
        }
        
        .footer-content {
            flex-direction: column;
            text-align: center;
        }
    }
    
    /* Success/Warning/Error styling */
    .stAlert {
        border-radius: 15px;
        border: none;
        box-shadow: 0 4px 15px var(--card-shadow);
    }
    
    .stAlert[data-baseweb="notification"] {
        animation: slideInRight 0.5s ease-out;
    }
    
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(100px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
</style>
""", unsafe_allow_html=True)

# Beautiful header
st.markdown("""
<div class="header-container">
    <h1 class="header-title">üåæ –ê–≥—Ä–æ-–ü–æ–≥–æ–¥–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞</h1>
    <p class="header-subtitle">üå§Ô∏è –ü–æ–≥–æ–¥–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤, –∞–≥—Ä–∞—Ä–∏–µ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π</p>
    <p style="color: rgba(255,255,255,0.8); margin-top: 1rem;">
        üìä –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã—Ö NASA ‚Ä¢ üå± –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Ä¢ üí° –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    </p>
</div>
""", unsafe_allow_html=True)

# Initialize session state
for key in ["score", "fails", "rounds", "history"]:
    if key not in st.session_state:
        st.session_state[key] = 0 if key != "history" else []

# Generate sample weather data (since CSV might not be available)
@st.cache_data
def generate_sample_data():
    np.random.seed(42)
    dates = pd.date_range(start='2023-01-01', end='2024-12-31', freq='D')
    regions = ['–ê—Å—Ç–∞–Ω–∞', '–ê–ª–º–∞—Ç—ã', '–®—ã–º–∫–µ–Ω—Ç', '–ê–∫—Ç–æ–±–µ', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞']
    
    data = []
    for date in dates:
        for region in regions:
            # Seasonal temperature variation
            day_of_year = date.timetuple().tm_yday
            base_temp = 15 + 20 * np.sin((day_of_year - 80) * 2 * np.pi / 365)
            temp = base_temp + np.random.normal(0, 5)
            
            # Precipitation with seasonal variation
            precip_base = 2 + 3 * np.sin((day_of_year - 120) * 2 * np.pi / 365)
            precip = max(0, precip_base + np.random.exponential(2))
            
            data.append({
                'date': date,
                'temperature_C': round(temp, 1),
                'precipitation_mm': round(precip, 1),
                'region': region
            })
    
    return pd.DataFrame(data)

# Load or generate data
try:
    df = pd.read_csv("weather_kazakhstan_with_region.csv")
    df["date"] = pd.to_datetime(df["date"])
    if "region" not in df.columns:
        regions = ['–ê—Å—Ç–∞–Ω–∞', '–ê–ª–º–∞—Ç—ã', '–®—ã–º–∫–µ–Ω—Ç']
        df['region'] = [random.choice(regions) for _ in range(len(df))]
except FileNotFoundError:
    df = generate_sample_data()

# Region selection
col1, col2 = st.columns([2, 1])
with col1:
    if "region" in df.columns:
        selected_region = st.selectbox("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", sorted(df["region"].unique()))
        df_filtered = df[df["region"] == selected_region].copy()
    else:
        st.warning("üìå –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑.")
        df_filtered = df.copy()

with col2:
    st.markdown("""
    <div class="metric-card">
        <h4 style="margin: 0; color: var(--primary-green);">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
        <p style="margin: 0.5rem 0 0 0; color: var(--text-dark);">
            –ó–∞–ø–∏—Å–µ–π: {}<br>
            –ü–µ—Ä–∏–æ–¥: {} –¥–Ω–µ–π
        </p>
    </div>
    """.format(len(df_filtered), (df_filtered['date'].max() - df_filtered['date'].min()).days), 
    unsafe_allow_html=True)

# Date range for analysis
date_min = df_filtered["date"].min().date()
date_max = df_filtered["date"].max().date()

# Tabs with enhanced styling
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    "üå± –ü–æ—Å–∞–¥–∏—Ç—å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å",
    "üå° –£–≥–∞–¥–∞–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É",
    "üåç –ú–∏—Ä –∏ –∫–ª–∏–º–∞—Ç",
    "üéì –û–±—É—á–µ–Ω–∏–µ –∞–≥—Ä–∞—Ä–∏—è",
    "üéÆ –°–∏–º—É–ª—è—Ü–∏—è —Ñ–µ—Ä–º–µ—Ä–∞"
])

# ===================== üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê =====================
with tab1:
    st.markdown("### üìà –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π")
    
    with st.expander("üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É?", expanded=False):
        st.markdown("""
        üîç **–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞
        
        üìä **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏:** –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        
        üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–∏—è –∏ –¥–∞–µ—Ç —Å–æ–≤–µ—Ç—ã
        
        üì± **–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è:** –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        """)
    
    # Date range selector
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("üìÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞:", date_min, min_value=date_min, max_value=date_max)
    with col2:
        end_date = st.date_input("üìÖ –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞:", date_max, min_value=date_min, max_value=date_max)
    
    if start_date <= end_date:
        start_datetime = pd.Timestamp(start_date)
        end_datetime = pd.Timestamp(end_date) + pd.Timedelta(days=1)
        mask = (df_filtered["date"] >= start_datetime) & (df_filtered["date"] < end_datetime)
        analysis_df = df_filtered[mask].copy()
        
        if len(analysis_df) > 0:
            # Modern interactive charts with Plotly
            fig = make_subplots(
                rows=2, cols=1,
                subplot_titles=('üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', 'üåßÔ∏è –û—Å–∞–¥–∫–∏ (–º–º)'),
                vertical_spacing=0.12
            )
            
            # Temperature chart
            fig.add_trace(
                go.Scatter(
                    x=analysis_df['date'],
                    y=analysis_df['temperature_C'],
                    mode='lines+markers',
                    name='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
                    line=dict(color='#FF6B6B', width=3),
                    marker=dict(size=6),
                    hovertemplate='<b>%{x}</b><br>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %{y:.1f}¬∞C<extra></extra>'
                ),
                row=1, col=1
            )
            
            # Precipitation chart
            fig.add_trace(
                go.Bar(
                    x=analysis_df['date'],
                    y=analysis_df['precipitation_mm'],
                    name='–û—Å–∞–¥–∫–∏',
                    marker_color='#4ECDC4',
                    hovertemplate='<b>%{x}</b><br>–û—Å–∞–¥–∫–∏: %{y:.1f} –º–º<extra></extra>'
                ),
                row=2, col=1
            )
            
            fig.update_layout(
                height=600,
                showlegend=False,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter", size=12),
                margin=dict(l=0, r=0, t=50, b=0)
            )
            
            fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='rgba(46, 139, 87, 0.1)')
            fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='rgba(46, 139, 87, 0.1)')
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Statistics and recommendations
            avg_temp = analysis_df["temperature_C"].mean()
            avg_precip = analysis_df["precipitation_mm"].mean()
            max_temp = analysis_df["temperature_C"].max()
            min_temp = analysis_df["temperature_C"].min()
            total_precip = analysis_df["precipitation_mm"].sum()
            
            # Beautiful metric cards
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(f"""
                <div class="metric-card">
                    <h4 style="margin: 0; color: var(--primary-green);">üå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</h4>
                    <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{avg_temp:.1f}¬∞C</h2>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="metric-card">
                    <h4 style="margin: 0; color: var(--sky-blue);">üåßÔ∏è –°—Ä–µ–¥–Ω–∏–µ –æ—Å–∞–¥–∫–∏</h4>
                    <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{avg_precip:.1f} –º–º</h2>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown(f"""
                <div class="metric-card">
                    <h4 style="margin: 0; color: var(--warning-orange);">üî• –ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</h4>
                    <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{max_temp:.1f}¬∞C</h2>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                st.markdown(f"""
                <div class="metric-card">
                    <h4 style="margin: 0; color: var(--deep-blue);">‚ùÑÔ∏è –ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</h4>
                    <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{min_temp:.1f}¬∞C</h2>
                </div>
                """, unsafe_allow_html=True)
            
            # Smart recommendations with enhanced styling
            st.markdown("### üéØ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            if avg_temp > 30 and avg_precip < 1:
                st.markdown("""
                <div class="metric-card danger">
                    <h4 style="margin: 0; color: var(--danger-red);">üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</h4>
                    <p style="margin: 0.5rem 0 0 0;">–û—á–µ–Ω—å –∂–∞—Ä–∫–æ –∏ —Å—É—Ö–æ ‚Äî –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞—Å—É—Ö–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</p>
                    <ul style="margin: 0.5rem 0 0 1rem;">
                        <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—Å—É—Ö–æ—É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å–æ—Ä—Ç–∞</li>
                        <li>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø–µ–ª—å–Ω–æ–≥–æ –æ—Ä–æ—à–µ–Ω–∏—è</li>
                        <li>–ú—É–ª—å—á–∏—Ä–æ–≤–∞—Ç—å –ø–æ—á–≤—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–ª–∞–≥–∏</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            elif avg_temp > 25 and avg_precip < 3:
                st.markdown("""
                <div class="metric-card warning">
                    <h4 style="margin: 0; color: var(--warning-orange);">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</h4>
                    <p style="margin: 0.5rem 0 0 0;">–¢—ë–ø–ª–∞—è –∏ —Å—É—Ö–∞—è –ø–æ–≥–æ–¥–∞ ‚Äî –≤–æ–∑–º–æ–∂–µ–Ω –¥–µ—Ñ–∏—Ü–∏—Ç –≤–ª–∞–≥–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</p>
                    <ul style="margin: 0.5rem 0 0 1rem;">
                        <li>–£–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª–∏–≤–∞</li>
                        <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–ø–µ–ª—å–Ω–æ–µ –æ—Ä–æ—à–µ–Ω–∏–µ</li>
                        <li>–í—ã–±—Ä–∞—Ç—å —Ä–∞–Ω–Ω–µ—Å–ø–µ–ª—ã–µ —Å–æ—Ä—Ç–∞</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            elif avg_temp < 10 and avg_precip > 5:
                st.markdown("""
                <div class="metric-card warning">
                    <h4 style="margin: 0; color: var(--warning-orange);">üåßÔ∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ</h4>
                    <p style="margin: 0.5rem 0 0 0;">–•–æ–ª–æ–¥–Ω–æ –∏ –≤–ª–∞–∂–Ω–æ ‚Äî —Ä–∏—Å–∫ –∑–∞–≥–Ω–∏–≤–∞–Ω–∏—è –∫–æ—Ä–Ω–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</p>
                    <ul style="margin: 0.5rem 0 0 1rem;">
                        <li>–û—Ç–ª–æ–∂–∏—Ç—å –ø–æ—Å–∞–¥–∫—É –Ω–∞ –±–æ–ª–µ–µ —Ç—ë–ø–ª—ã–π –ø–µ—Ä–∏–æ–¥</li>
                        <li>–£–ª—É—á—à–∏—Ç—å –¥—Ä–µ–Ω–∞–∂ –ø–æ—á–≤—ã</li>
                        <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–≥–∏—Ü–∏–¥—ã –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            elif 20 <= avg_temp <= 28 and 1 <= avg_precip <= 5:
                st.markdown("""
                <div class="metric-card success">
                    <h4 style="margin: 0; color: var(--success-green);">‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</h4>
                    <p style="margin: 0.5rem 0 0 0;">–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø–æ—Å–µ–≤–∞! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</p>
                    <ul style="margin: 0.5rem 0 0 1rem;">
                        <li>–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä</li>
                        <li>–ú–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</li>
                        <li>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div class="metric-card">
                    <h4 style="margin: 0; color: var(--primary-green);">üìä –£–º–µ—Ä–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</h4>
                    <p style="margin: 0.5rem 0 0 0;">–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ç—Ä–µ–±—É—é—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –∫–∞–∂–¥–æ–π –∫—É–ª—å—Ç—É—Ä–µ.</p>
                </div>
                """, unsafe_allow_html=True)
            
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")
    else:
        st.error("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã.")

# ===================== üå± –ò–ì–†–ê ‚Ññ1 =====================
with tab2:
    st.markdown("### üåæ Agro Decision Challenge")
    
    with st.expander("üéÆ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", expanded=False):
        st.markdown("""
        üéØ **–¶–µ–ª—å:** –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ—Å–∞–¥–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        
        üå± **–ö—É–ª—å—Ç—É—Ä—ã:** –ö–∞–∂–¥–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:
        - **–ü—à–µ–Ω–∏—Ü–∞:** 15-25¬∞C, –æ—Å–∞–¥–∫–∏ 1-4 –º–º
        - **–ö—É–∫—É—Ä—É–∑–∞:** 22-30¬∞C, –æ—Å–∞–¥–∫–∏ 2-6 –º–º  
        - **–†–∏—Å:** 24-32¬∞C, –æ—Å–∞–¥–∫–∏ ‚â•5 –º–º
        
        ‚≠ê **–û—á–∫–∏:** –ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        """)
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        crop_type = st.selectbox("üå± –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:", ["–ü—à–µ–Ω–∏—Ü–∞", "–ö—É–∫—É—Ä—É–∑–∞", "–†–∏—Å"])
    
    with col2:
        if st.button("üé≤ –ù–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è", key="new_conditions"):
            st.rerun()
    
    # Get random weather conditions
    row = df_filtered.sample(1).iloc[0]
    date = pd.to_datetime(row["date"]).date()
    temp = row["temperature_C"]
    rain = row["precipitation_mm"]
    
    # Weather display with beautiful cards
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(f"""
        <div class="metric-card">
            <h4 style="margin: 0; color: var(--primary-green);">üìÖ –î–∞—Ç–∞</h4>
            <h3 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{date}</h3>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        temp_color = "var(--danger-red)" if temp > 30 else "var(--warning-orange)" if temp > 25 else "var(--success-green)"
        st.markdown(f"""
        <div class="metric-card">
            <h4 style="margin: 0; color: {temp_color};">üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</h4>
            <h3 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{temp:.1f}¬∞C</h3>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        rain_color = "var(--danger-red)" if rain > 8 else "var(--success-green)" if 1 <= rain <= 6 else "var(--warning-orange)"
        st.markdown(f"""
        <div class="metric-card">
            <h4 style="margin: 0; color: {rain_color};">üåßÔ∏è –û—Å–∞–¥–∫–∏</h4>
            <h3 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{rain:.1f} –º–º</h3>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("### ü§î –ß—Ç–æ –≤—ã —Ä–µ—à–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
    
    col1, col2 = st.columns(2)
    with col1:
        plant = st.button("üåæ –ü–æ—Å–∞–¥–∏—Ç—å —É—Ä–æ–∂–∞–π", key="plant", use_container_width=True)
    with col2:
        wait = st.button("‚è≥ –ü–æ–¥–æ–∂–¥–∞—Ç—å –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π", key="wait", use_container_width=True)
    
    if plant or wait:
        st.session_state["rounds"] += 1
        
        # Enhanced crop logic with detailed feedback
        outcome = "neutral"
        message = "ü§î –£–º–µ—Ä–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è."
        detailed_advice = ""
        
        if crop_type == "–ü—à–µ–Ω–∏—Ü–∞":
            if 15 <= temp <= 25 and 1 <= rain <= 4:
                outcome = "good"
                message = "‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—à–µ–Ω–∏—Ü—ã!"
                detailed_advice = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –ø—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏—è –∏ —Ä–æ—Å—Ç–∞ –ø—à–µ–Ω–∏—Ü—ã."
            elif temp > 30 and rain < 1:
                outcome = "bad"
                message = "üî• –°–ª–∏—à–∫–æ–º –∂–∞—Ä–∫–æ –∏ —Å—É—Ö–æ –¥–ª—è –ø—à–µ–Ω–∏—Ü—ã."
                detailed_advice = "–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –∑–µ—Ä–Ω–æ, –∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–ª–∞–≥–∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–ª–æ—Ö–æ–º—É —É—Ä–æ–∂–∞—é."
            elif temp < 10 and rain > 5:
                outcome = "bad"
                message = "‚ùÑÔ∏è –°–ª–∏—à–∫–æ–º —Ö–æ–ª–æ–¥–Ω–æ –∏ –≤–ª–∞–∂–Ω–æ –¥–ª—è –ø—à–µ–Ω–∏—Ü—ã."
                detailed_advice = "–ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–º–µ–¥–ª–∏—Ç —Ä–æ—Å—Ç, –∞ –∏–∑–±—ã—Ç–æ–∫ –≤–ª–∞–≥–∏ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –≥—Ä–∏–±–∫–æ–≤—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è."
        
        elif crop_type == "–ö—É–∫—É—Ä—É–∑–∞":
            if 22 <= temp <= 30 and 2 <= rain <= 6:
                outcome = "good"
                message = "üåΩ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∫—É–∫—É—Ä—É–∑—ã!"
                detailed_advice = "–¢–µ–ø–ª–∞—è –ø–æ–≥–æ–¥–∞ –∏ —É–º–µ—Ä–µ–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏ —Å–æ–∑–¥–∞—é—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–æ—Å—Ç–∞ –∫—É–∫—É—Ä—É–∑—ã."
            elif temp < 15:
                outcome = "bad"
                message = "ü•∂ –°–ª–∏—à–∫–æ–º —Ö–æ–ª–æ–¥–Ω–æ –¥–ª—è –∫—É–∫—É—Ä—É–∑—ã."
                detailed_advice = "–ö—É–∫—É—Ä—É–∑–∞ —Ç–µ–ø–ª–æ–ª—é–±–∏–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∏ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –Ω–∏–∑–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."
            elif rain > 8:
                outcome = "bad"
                message = "üåä –ü–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ ‚Äî –∫—É–∫—É—Ä—É–∑–∞ –Ω–µ –≤—ã–∂–∏–≤–µ—Ç."
                detailed_advice = "–ò–∑–±—ã—Ç–æ–∫ –≤–ª–∞–≥–∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∑–∞–≥–Ω–∏–≤–∞–Ω–∏—é –∫–æ—Ä–Ω–µ–π –∏ —Å—Ç–µ–±–ª–µ–π –∫—É–∫—É—Ä—É–∑—ã."
        
        elif crop_type == "–†–∏—Å":
            if 24 <= temp <= 32 and rain >= 5:
                outcome = "good"
                message = "üçö –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ –¥–ª—è —Ä–∏—Å–∞!"
                detailed_advice = "–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –æ–±–∏–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏ ‚Äî –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∏—Å–æ–≤—ã—Ö –ø–æ–ª–µ–π."
            elif rain < 3:
                outcome = "bad"
                message = "üíß –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–ª–∞–≥–∏ –¥–ª—è —Ä–∏—Å–∞."
                detailed_advice = "–†–∏—Å —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ –≤–æ–¥—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è."
            elif temp < 18:
                outcome = "bad"
                message = "‚ùÑÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–ø–ª–∞ –¥–ª—è —Ä–∏—Å–∞."
                detailed_advice = "–†–∏—Å ‚Äî —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞, —Ç—Ä–µ–±—É—é—â–∞—è –≤—ã—Å–æ–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä."
        
        # Enhanced decision feedback with animations
        if plant:
            if outcome == "good":
                st.success(f"üëç {message}")
                st.info(f"üí° **–î–µ—Ç–∞–ª–∏:** {detailed_advice}")
                st.balloons()
                st.session_state["score"] += 1
                
                # Success image
                st.markdown("""
                <div style="text-align: center; margin: 1rem 0;">
                    <div class="pulse-animation">
                        <img src="https://media.giphy.com/media/26ufcVAp3AiepbFm0/giphy.gif" 
                             style="border-radius: 15px; max-width: 300px;" alt="Success"/>
                    </div>
                    <p style="color: var(--success-green); font-weight: 600; margin-top: 1rem;">
                        üå± –û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –£—Ä–æ–∂–∞–π –±—É–¥–µ—Ç –±–æ–≥–∞—Ç—ã–º!
                    </p>
                </div>
                """, unsafe_allow_html=True)
                
            elif outcome == "bad":
                st.error(f"üëé {message}")
                st.info(f"üí° **–î–µ—Ç–∞–ª–∏:** {detailed_advice}")
                st.session_state["fails"] += 1
                
                st.markdown("""
                <div style="text-align: center; margin: 1rem 0;">
                    <img src="https://media.giphy.com/media/3o7TKwmnDgQb5jemjK/giphy.gif" 
                         style="border-radius: 15px; max-width: 300px;" alt="Problem"/>
                    <p style="color: var(--danger-red); font-weight: 600; margin-top: 1rem;">
                        üíî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É—Ä–æ–∂–∞–π –ø–æ—Å—Ç—Ä–∞–¥–∞–µ—Ç...
                    </p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.info(f"üòê {message}")
                st.info(f"üí° **–î–µ—Ç–∞–ª–∏:** {detailed_advice}")
                
                st.markdown("""
                <div style="text-align: center; margin: 1rem 0;">
                    <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" 
                         style="border-radius: 15px; max-width: 300px;" alt="Neutral"/>
                    <p style="color: var(--primary-green); font-weight: 600; margin-top: 1rem;">
                        ü§∑‚Äç‚ôÇÔ∏è –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    </p>
                </div>
                """, unsafe_allow_html=True)
        
        else:  # wait
            if outcome == "bad":
                st.success(f"‚úÖ –ú—É–¥—Ä–æ –ø–æ–¥–æ–∂–¥–∞–ª–∏ ‚Äî —É—Å–ª–æ–≤–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–ª–æ—Ö–∏–µ –¥–ª—è '{crop_type}'.")
                st.info(f"üí° **–î–µ—Ç–∞–ª–∏:** {detailed_advice}")
                st.session_state["score"] += 1
            elif outcome == "good":
                st.warning(f"üôÉ –£–ø—É—â–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å ‚Äî —É—Å–ª–æ–≤–∏—è –±—ã–ª–∏ –æ—Ç–ª–∏—á–Ω—ã–º–∏ –¥–ª—è '{crop_type}'.")
                st.info(f"üí° **–î–µ—Ç–∞–ª–∏:** {detailed_advice}")
                st.session_state["fails"] += 1
            else:
                st.info(f"üôÇ –†–µ—à–µ–Ω–∏–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å —Ä–∞–∑—É–º–Ω–æ –≤ —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.")
        
        # Enhanced statistics display
        st.markdown("---")
        st.markdown("### üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–µ—Ä–º–µ—Ä–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card success">
                <h4 style="margin: 0; color: var(--success-green);">‚úÖ –£—Å–ø–µ—Ö–∏</h4>
                <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{st.session_state["score"]}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="metric-card danger">
                <h4 style="margin: 0; color: var(--danger-red);">‚ùå –û—à–∏–±–∫–∏</h4>
                <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{st.session_state["fails"]}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="metric-card">
                <h4 style="margin: 0; color: var(--primary-green);">üîÅ –†–∞—É–Ω–¥—ã</h4>
                <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{st.session_state["rounds"]}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            if st.session_state["rounds"] > 0:
                success_rate = (st.session_state["score"] / st.session_state["rounds"]) * 100
                rate_color = "var(--success-green)" if success_rate >= 70 else "var(--warning-orange)" if success_rate >= 50 else "var(--danger-red)"
                st.markdown(f"""
                <div class="metric-card">
                    <h4 style="margin: 0; color: {rate_color};">üéØ –¢–æ—á–Ω–æ—Å—Ç—å</h4>
                    <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{success_rate:.0f}%</h2>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div class="metric-card">
                    <h4 style="margin: 0; color: var(--primary-green);">üéØ –¢–æ—á–Ω–æ—Å—Ç—å</h4>
                    <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">--%</h2>
                </div>
                """, unsafe_allow_html=True)

# ===================== üå° –ò–ì–†–ê ‚Ññ2 =====================
with tab3:
    st.markdown("### üå°Ô∏è –£–≥–∞–¥–∞–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
    
    with st.expander("üéØ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?", expanded=False):
        st.markdown("""
        üéÆ **–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ:**
        - –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É –∏ –æ—Å–∞–¥–∫–∏
        - –£–≥–∞–¥—ã–≤–∞–π—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é —Å–ª–∞–π–¥–µ—Ä–∞
        - –ß–µ–º —Ç–æ—á–Ω–µ–µ —É–≥–∞–¥–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –ø–æ–ª—É—á–∏—Ç–µ
        
        üèÜ **–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤:**
        - ¬±2¬∞C = –û—Ç–ª–∏—á–Ω–æ! (+1 –±–∞–ª–ª)
        - ¬±5¬∞C = –•–æ—Ä–æ—à–æ!
        - >5¬∞C = –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑
        """)
    
    # Get random data for guessing game
    row = df_filtered.sample(1).iloc[0]
    date = pd.to_datetime(row["date"]).date()
    true_temp = row["temperature_C"]
    rain = row["precipitation_mm"]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"""
        <div class="metric-card">
            <h4 style="margin: 0; color: var(--primary-green);">üìÖ –î–∞—Ç–∞</h4>
            <h3 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{date}</h3>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metric-card">
            <h4 style="margin: 0; color: var(--sky-blue);">üåßÔ∏è –û—Å–∞–¥–∫–∏</h4>
            <h3 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{rain:.1f} –º–º</h3>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("### ü§î –ö–∞–∫–∞—è –±—ã–ª–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?")
    
    guess = st.slider(
        "–î–≤–∏–≥–∞–π—Ç–µ —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:",
        min_value=-40,
        max_value=50,
        value=20,
        step=1,
        help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞—Ç—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–∞–¥–∫–æ–≤ –∫–∞–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏"
    )
    
    col1, col2 = st.columns([1, 1])
    with col1:
        check_button = st.button("üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç", key="check_temp", use_container_width=True)
    with col2:
        new_question = st.button("üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", key="new_temp_question", use_container_width=True)
    
    if new_question:
        st.rerun()
    
    if check_button:
        st.session_state["rounds"] += 1
        diff = abs(true_temp - guess)
        
        # Beautiful result display with enhanced feedback
        if diff <= 2:
            st.balloons()
            st.success(f"üéØ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Ç–æ—á–Ω–æ! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—ã–ª–∞ {true_temp:.1f}¬∞C")
            st.session_state["score"] += 1
            
            st.markdown("""
            <div style="text-align: center; margin: 1rem 0;">
                <div class="pulse-animation">
                    <img src="https://media.giphy.com/media/3o7abKhOpu0NwenH3O/giphy.gif" 
                         style="border-radius: 15px; max-width: 250px;" alt="Excellent"/>
                </div>
                <p style="color: var(--success-green); font-weight: 600; margin-top: 1rem;">
                    üèÜ –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–≥–æ–¥–µ!
                </p>
            </div>
            """, unsafe_allow_html=True)
            
        elif diff <= 5:
            st.info(f"üôÇ –•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—ã–ª–∞ {true_temp:.1f}¬∞C (—Ä–∞–∑–Ω–∏—Ü–∞ {diff:.1f}¬∞C)")
            
            st.markdown("""
            <div style="text-align: center; margin: 1rem 0;">
                <img src="https://media.giphy.com/media/3oriO5t2QB4IPKgxHi/giphy.gif" 
                     style="border-radius: 15px; max-width: 250px;" alt="Good"/>
                <p style="color: var(--primary-green); font-weight: 600; margin-top: 1rem;">
                    üëç –ù–µ–ø–ª–æ—Ö–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è!
                </p>
            </div>
            """, unsafe_allow_html=True)
            
        else:
            st.error(f"üòï –ù–µ —É–≥–∞–¥–∞–ª–∏. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—ã–ª–∞ {true_temp:.1f}¬∞C (—Ä–∞–∑–Ω–∏—Ü–∞ {diff:.1f}¬∞C)")
            st.session_state["fails"] += 1
            
            st.markdown("""
            <div style="text-align: center; margin: 1rem 0;">
                <img src="https://media.giphy.com/media/3o7TKTDn976rzVgky4/giphy.gif" 
                     style="border-radius: 15px; max-width: 250px;" alt="Try again"/>
                <p style="color: var(--warning-orange); font-weight: 600; margin-top: 1rem;">
                    ü§∑‚Äç‚ôÇÔ∏è –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë!
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        # Tips for improvement
        month = date.month
        season_tip = ""
        if month in [12, 1, 2]:
            season_tip = "‚ùÑÔ∏è **–ó–∏–º–Ω–∏–π —Å–µ–∑–æ–Ω:** –í –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ –∑–∏–º–æ–π –æ–±—ã—á–Ω–æ –æ—Ç -20¬∞C –¥–æ -5¬∞C"
        elif month in [3, 4, 5]:
            season_tip = "üå∏ **–í–µ—Å–µ–Ω–Ω–∏–π —Å–µ–∑–æ–Ω:** –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –æ—Ç 0¬∞C –¥–æ 20¬∞C"
        elif month in [6, 7, 8]:
            season_tip = "‚òÄÔ∏è **–õ–µ—Ç–Ω–∏–π —Å–µ–∑–æ–Ω:** –ñ–∞—Ä–∫–æ–µ –ª–µ—Ç–æ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç 20¬∞C –¥–æ 40¬∞C"
        else:
            season_tip = "üçÇ **–û—Å–µ–Ω–Ω–∏–π —Å–µ–∑–æ–Ω:** –ü—Ä–æ—Ö–ª–∞–¥–Ω–µ–µ—Ç –æ—Ç 20¬∞C –¥–æ 0¬∞C"
        
        st.info(f"üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** {season_tip}")

# ===================== üåç –ú–ò–† –ò –ö–õ–ò–ú–ê–¢ =====================
with tab4:
    st.markdown("### üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã")
    
    # Interactive world map with climate data
    st.markdown("#### üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∫–ª–∏–º–∞—Ç–∞")
    
    # Sample global climate data
    climate_data = [
        {"name": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω üá∞üáø", "lat": 48.0, "lon": 67.0, "temp": 25, "rain": 3, "region": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è"},
        {"name": "–°–®–ê üá∫üá∏", "lat": 39.0, "lon": -98.0, "temp": 30, "rain": 2, "region": "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞"},
        {"name": "–ë—Ä–∞–∑–∏–ª–∏—è üáßüá∑", "lat": -10.0, "lon": -55.0, "temp": 28, "rain": 6, "region": "–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞"},
        {"name": "–ò–Ω–¥–∏—è üáÆüá≥", "lat": 20.0, "lon": 78.0, "temp": 32, "rain": 8, "region": "–ê–∑–∏—è"},
        {"name": "–§—Ä–∞–Ω—Ü–∏—è üá´üá∑", "lat": 46.0, "lon": 2.0, "temp": 22, "rain": 4, "region": "–ï–≤—Ä–æ–ø–∞"},
        {"name": "–ê–≤—Å—Ç—Ä–∞–ª–∏—è üá¶üá∫", "lat": -25.0, "lon": 135.0, "temp": 35, "rain": 1, "region": "–û–∫–µ–∞–Ω–∏—è"},
        {"name": "–Æ–ê–† üáøüá¶", "lat": -30.0, "lon": 25.0, "temp": 26, "rain": 3, "region": "–ê—Ñ—Ä–∏–∫–∞"}
    ]
    
    # Create Folium map
    m = folium.Map(location=[20, 0], zoom_start=2, tiles="CartoDB positron")
    
    for location in climate_data:
        # Color coding for temperature
        if location["temp"] > 30:
            color = "red"
        elif location["temp"] > 20:
            color = "orange"
        else:
            color = "blue"
        
        # Create popup with climate info
        popup_text = f"""
        <div style="font-family: Inter; min-width: 200px;">
            <h4 style="margin: 0; color: #2E8B57;">{location['name']}</h4>
            <p><strong>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</strong> {location['temp']}¬∞C</p>
            <p><strong>üåßÔ∏è –û—Å–∞–¥–∫–∏:</strong> {location['rain']} –º–º</p>
            <p><strong>üó∫Ô∏è –†–µ–≥–∏–æ–Ω:</strong> {location['region']}</p>
        </div>
        """
        
        folium.CircleMarker(
            location=[location["lat"], location["lon"]],
            radius=max(10, location["temp"] / 2),
            popup=folium.Popup(popup_text, max_width=250),
            tooltip=location["name"],
            color=color,
            fill=True,
            weight=2,
            fillOpacity=0.7
        ).add_to(m)
    
    # Display map
    map_data = st_folium(m, width=700, height=400)
    
    # Climate comparison charts
    st.markdown("#### üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    
    # Create DataFrame for comparison
    climate_df = pd.DataFrame(climate_data)
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Temperature comparison
        fig_temp = px.bar(
            climate_df,
            x="name",
            y="temp",
            title="üå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º",
            color="temp",
            color_continuous_scale="RdYlBu_r",
            height=400
        )
        fig_temp.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(family="Inter", size=11),
            xaxis_tickangle=-45
        )
        st.plotly_chart(fig_temp, use_container_width=True)
    
    with col2:
        # Precipitation comparison
        fig_precip = px.bar(
            climate_df,
            x="name",
            y="rain",
            title="üåßÔ∏è –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–∞–¥–∫–æ–≤",
            color="rain",
            color_continuous_scale="Blues",
            height=400
        )
        fig_precip.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(family="Inter", size=11),
            xaxis_tickangle=-45
        )
        st.plotly_chart(fig_precip, use_container_width=True)
    
    # Scatter plot for climate patterns
    st.markdown("#### üîç –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    
    fig_scatter = px.scatter(
        climate_df,
        x="temp",
        y="rain",
        size="temp",
        color="region",
        hover_name="name",
        title="–°–≤—è–∑—å –º–µ–∂–¥—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –æ—Å–∞–¥–∫–∞–º–∏",
        labels={"temp": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", "rain": "–û—Å–∞–¥–∫–∏ (–º–º)"},
        height=500
    )
    fig_scatter.update_layout(
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(family="Inter", size=12)
    )
    st.plotly_chart(fig_scatter, use_container_width=True)

# ===================== üéì –û–ë–£–ß–ï–ù–ò–ï –ê–ì–†–ê–†–ò–Ø =====================
with tab5:
    st.markdown("### üéì –ê–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    
    # Educational sections with enhanced styling
    education_sections = [
        {
            "title": "üå± –û—Å–Ω–æ–≤—ã —Ä–∞—Å—Ç–µ–Ω–∏–µ–≤–æ–¥—Å—Ç–≤–∞",
            "icon": "üåæ",
            "content": """
            **–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:**
            - **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º:** –ö–∞–∂–¥–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
            - **–í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å:** –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ–ª–∏–≤–∞ –∏ –¥—Ä–µ–Ω–∞–∂–∞
            - **–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞:** NPK (–∞–∑–æ—Ç, —Ñ–æ—Å—Ñ–æ—Ä, –∫–∞–ª–∏–π) - –æ—Å–Ω–æ–≤–∞ –ø–∏—Ç–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π
            - **–°–µ–≤–æ–æ–±–æ—Ä–æ—Ç:** –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è –ø–æ—á–≤—ã
            
            **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã:**
            - –ò–∑—É—á–∞–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ–≥–æ–¥—ã –º–∏–Ω–∏–º—É–º –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
            - –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏
            - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—É–ª—å—á–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–ª–∞–≥–∏
            """
        },
        {
            "title": "üå°Ô∏è –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
            "icon": "üó∫Ô∏è",
            "content": """
            **–°–µ–≤–µ—Ä–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω:**
            - –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–ª–∏–º–∞—Ç
            - –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è: –ø—à–µ–Ω–∏—Ü–∞, —è—á–º–µ–Ω—å, –æ–≤—ë—Å
            - –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –∫–æ—Ä–æ—Ç–∫–æ–µ –ª–µ—Ç–æ, —Å—É—Ä–æ–≤–∞—è –∑–∏–º–∞
            
            **–Æ–∂–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω:**
            - –ê—Ä–∏–¥–Ω—ã–π –∏ —Å–µ–º–∏–∞—Ä–∏–¥–Ω—ã–π –∫–ª–∏–º–∞—Ç
            - –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è: —Ö–ª–æ–ø–æ–∫, —Ä–∏—Å, –±–∞—Ö—á–µ–≤—ã–µ
            - –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –∂–∞—Ä–∫–æ–µ –ª–µ—Ç–æ, –º—è–≥–∫–∞—è –∑–∏–º–∞
            
            **–í–æ—Å—Ç–æ—á–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω:**
            - –£–º–µ—Ä–µ–Ω–Ω–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π
            - –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è: –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –æ–≤–æ—â–∏, –∫–æ—Ä–º–æ–≤—ã–µ
            - –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ
            """
        },
        {
            "title": "üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "icon": "üìà",
            "content": """
            **–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
            - **–ì–¢–ö (–ì–∏–¥—Ä–æ—Ç–µ—Ä–º–∏—á–µ—Å–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç):** –û—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Å–∞–¥–∫–æ–≤ –∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
            - **–°—É–º–º–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä:** –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Ç–µ–ø–ª–æ –∑–∞ –≤–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            - **–ò–Ω–¥–µ–∫—Å –∑–∞—Å—É—à–ª–∏–≤–æ—Å—Ç–∏:** –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –≤–ª–∞–≥–∏
            
            **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
            - –ì–¢–ö > 1.3 - –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ
            - –ì–¢–ö 1.0-1.3 - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ  
            - –ì–¢–ö < 1.0 - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ
            
            **–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
            - –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ MODIS
            - –ú–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–∏ IoT
            - –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            """
        }
    ]
    
    for i, section in enumerate(education_sections):
        with st.expander(f"{section['icon']} {section['title']}", expanded=i==0):
            st.markdown(f"""
            <div class="metric-card">
                {section['content']}
            </div>
            """, unsafe_allow_html=True)
    
    # Interactive quiz section
    st.markdown("### üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è")
    
    quiz_questions = [
        {
            "question": "–ö–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è –ø—à–µ–Ω–∏—Ü—ã?",
            "options": ["10-15¬∞C", "15-25¬∞C", "25-35¬∞C", "35-45¬∞C"],
            "correct": 1,
            "explanation": "–ü—à–µ–Ω–∏—Ü–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ 15-25¬∞C. –ü—Ä–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö –∑–µ—Ä–Ω–æ –º–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–∞—Ç—å—Å—è, –∞ –ø—Ä–∏ –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏—Ö - —Ä–æ—Å—Ç –∑–∞–º–µ–¥–ª—è–µ—Ç—Å—è."
        },
        {
            "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ì–¢–ö –±–æ–ª—å—à–µ 1.3?",
            "options": ["–ó–∞—Å—É—Ö–∞", "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ", "–ò–∑–±—ã—Ç–æ—á–Ω–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ", "–ó–∞–º–æ—Ä–æ–∑–∫–∏"],
            "correct": 2,
            "explanation": "–ì–¢–ö (–ì–∏–¥—Ä–æ—Ç–µ—Ä–º–∏—á–µ—Å–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç) –±–æ–ª—å—à–µ 1.3 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–µ—Ä–µ—É–≤–ª–∞–∂–Ω–µ–Ω–∏—é –ø–æ—á–≤—ã."
        },
        {
            "question": "–ö–∞–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω–∞ –∫ –≤–ª–∞–≥–µ?",
            "options": ["–ü—à–µ–Ω–∏—Ü–∞", "–ö—É–∫—É—Ä—É–∑–∞", "–†–∏—Å", "–Ø—á–º–µ–Ω—å"],
            "correct": 2,
            "explanation": "–†–∏—Å - —Å–∞–º–∞—è –≤–ª–∞–≥–æ–ª—é–±–∏–≤–∞—è –∫—É–ª—å—Ç—É—Ä–∞, —Ç—Ä–µ–±—É—é—â–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —É–≤–ª–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –¥–∞–∂–µ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è –ø–æ–ª–µ–π."
        }
    ]
    
    if "quiz_score" not in st.session_state:
        st.session_state.quiz_score = 0
    if "quiz_completed" not in st.session_state:
        st.session_state.quiz_completed = []
    
    for i, question in enumerate(quiz_questions):
        if i not in st.session_state.quiz_completed:
            st.markdown(f"**–í–æ–ø—Ä–æ—Å {i+1}:** {question['question']}")
            
            answer = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
                question['options'],
                key=f"quiz_{i}"
            )
            
            if st.button(f"–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å {i+1}", key=f"answer_{i}"):
                selected_index = question['options'].index(answer)
                if selected_index == question['correct']:
                    st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    st.session_state.quiz_score += 1
                else:
                    st.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                
                st.info(f"üí° **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
                st.session_state.quiz_completed.append(i)
                st.rerun()
            
            st.markdown("---")
            break
    
    if len(st.session_state.quiz_completed) == len(quiz_questions):
        score_percentage = (st.session_state.quiz_score / len(quiz_questions)) * 100
        
        if score_percentage >= 80:
            st.balloons()
            st.success(f"üèÜ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {st.session_state.quiz_score}/{len(quiz_questions)} ({score_percentage:.0f}%)")
        elif score_percentage >= 60:
            st.info(f"üëç –•–æ—Ä–æ—à–æ! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {st.session_state.quiz_score}/{len(quiz_questions)} ({score_percentage:.0f}%)")
        else:
            st.warning(f"üìö –ù—É–∂–Ω–æ –µ—â—ë –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª. –†–µ–∑—É–ª—å—Ç–∞—Ç: {st.session_state.quiz_score}/{len(quiz_questions)} ({score_percentage:.0f}%)")
        
        if st.button("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ"):
            st.session_state.quiz_score = 0
            st.session_state.quiz_completed = []
            st.rerun()

# ===================== üéÆ –°–ò–ú–£–õ–Ø–¶–ò–Ø –§–ï–†–ú–ï–†–ê =====================
with tab6:
    st.markdown("### üéÆ –°–∏–º—É–ª—è—Ç–æ—Ä —Ñ–µ—Ä–º–µ—Ä—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞")
    
    # Initialize farm simulation state
    if "farm_money" not in st.session_state:
        st.session_state.farm_money = 1000
    if "farm_crops" not in st.session_state:
        st.session_state.farm_crops = {"–ü—à–µ–Ω–∏—Ü–∞": 0, "–ö—É–∫—É—Ä—É–∑–∞": 0, "–†–∏—Å": 0}
    if "farm_season" not in st.session_state:
        st.session_state.farm_season = 1
    if "farm_weather" not in st.session_state:
        # Generate random weather for this season
        st.session_state.farm_weather = {
            "temp": round(random.uniform(15, 35), 1),
            "rain": round(random.uniform(0, 10), 1),
            "description": random.choice(["–°–æ–ª–Ω–µ—á–Ω–æ", "–û–±–ª–∞—á–Ω–æ", "–î–æ–∂–¥–ª–∏–≤–æ", "–í–µ—Ç—Ä–µ–Ω–æ"])
        }
    
    # Farm dashboard
    st.markdown("#### üè° –í–∞—à–µ —Ñ–µ—Ä–º–µ—Ä—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="metric-card success">
            <h4 style="margin: 0; color: var(--success-green);">üí∞ –ë—é–¥–∂–µ—Ç</h4>
            <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{st.session_state.farm_money}‚Ç∏</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metric-card">
            <h4 style="margin: 0; color: var(--primary-green);">üåæ –°–µ–∑–æ–Ω</h4>
            <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{st.session_state.farm_season}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        weather = st.session_state.farm_weather
        temp_color = "var(--danger-red)" if weather["temp"] > 30 else "var(--success-green)"
        st.markdown(f"""
        <div class="metric-card">
            <h4 style="margin: 0; color: {temp_color};">üå°Ô∏è –ü–æ–≥–æ–¥–∞</h4>
            <h3 style="margin: 0.5rem 0 0 0; color: var(--text-dark); font-size: 1.2rem;">{weather['temp']}¬∞C</h3>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        total_crops = sum(st.session_state.farm_crops.values())
        st.markdown(f"""
        <div class="metric-card">
            <h4 style="margin: 0; color: var(--earth-brown);">üå± –ü–æ—Å–µ–≤—ã</h4>
            <h2 style="margin: 0.5rem 0 0 0; color: var(--text-dark);">{total_crops} –≥–∞</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # Current weather display
    st.markdown("#### üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞")
    weather = st.session_state.farm_weather
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{weather['temp']}¬∞C")
    with col2:
        st.metric("üåßÔ∏è –û—Å–∞–¥–∫–∏", f"{weather['rain']} –º–º")
    with col3:
        st.metric("‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è", weather['description'])
    
    # Farming actions
    st.markdown("#### üöú –î–µ–π—Å—Ç–≤–∏—è —Ñ–µ—Ä–º–µ—Ä–∞")
    
    # Crop prices and costs
    crop_data = {
        "–ü—à–µ–Ω–∏—Ü–∞": {"cost": 50, "profit": 80, "optimal_temp": (15, 25), "optimal_rain": (1, 4)},
        "–ö—É–∫—É—Ä—É–∑–∞": {"cost": 70, "profit": 120, "optimal_temp": (22, 30), "optimal_rain": (2, 6)},
        "–†–∏—Å": {"cost": 100, "profit": 160, "optimal_temp": (24, 32), "optimal_rain": (5, 10)}
    }
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üå± –ü–æ—Å–∞–¥–∏—Ç—å –∫—É–ª—å—Ç—É—Ä—ã:**")
        crop_to_plant = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:", list(crop_data.keys()))
        area_to_plant = st.number_input("–ü–ª–æ—â–∞–¥—å (–≥–∞):", min_value=1, max_value=20, value=5)
        
        total_cost = crop_data[crop_to_plant]["cost"] * area_to_plant
        
        if st.button(f"–ü–æ—Å–∞–¥–∏—Ç—å {crop_to_plant} ({total_cost}‚Ç∏)", key="plant_crop"):
            if st.session_state.farm_money >= total_cost:
                st.session_state.farm_money -= total_cost
                st.session_state.farm_crops[crop_to_plant] += area_to_plant
                st.success(f"‚úÖ –ü–æ—Å–∞–∂–µ–Ω–æ {area_to_plant} –≥–∞ {crop_to_plant}")
                st.rerun()
            else:
                st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
    
    with col2:
        st.markdown("**üìà –°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π:**")
        if any(crop_area > 0 for crop_area in st.session_state.farm_crops.values()):
            for crop_name, crop_area in st.session_state.farm_crops.items():
                if crop_area > 0:
                    if st.button(f"–°–æ–±—Ä–∞—Ç—å {crop_name} ({crop_area} –≥–∞)", key=f"harvest_{crop_name}"):
                        # Calculate harvest success based on weather
                        crop_info = crop_data[crop_name]
                        weather = st.session_state.farm_weather
                        
                        temp_ok = crop_info["optimal_temp"][0] <= weather["temp"] <= crop_info["optimal_temp"][1]
                        rain_ok = crop_info["optimal_rain"][0] <= weather["rain"] <= crop_info["optimal_rain"][1]
                        
                        success_rate = 1.0
                        if not temp_ok:
                            success_rate *= 0.7
                        if not rain_ok:
                            success_rate *= 0.8
                        
                        harvest_profit = int(crop_info["profit"] * crop_area * success_rate)
                        st.session_state.farm_money += harvest_profit
                        st.session_state.farm_crops[crop_name] = 0
                        
                        if success_rate >= 0.9:
                            st.balloons()
                            st.success(f"üèÜ –û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–∂–∞–π! –ü–æ–ª—É—á–µ–Ω–æ {harvest_profit}‚Ç∏")
                        elif success_rate >= 0.7:
                            st.info(f"‚úÖ –•–æ—Ä–æ—à–∏–π —É—Ä–æ–∂–∞–π! –ü–æ–ª—É—á–µ–Ω–æ {harvest_profit}‚Ç∏")
                        else:
                            st.warning(f"‚ö†Ô∏è –£—Ä–æ–∂–∞–π –ø–æ—Å—Ç—Ä–∞–¥–∞–ª –æ—Ç –ø–æ–≥–æ–¥—ã. –ü–æ–ª—É—á–µ–Ω–æ {harvest_profit}‚Ç∏")
                        
                        st.rerun()
        else:
            st.info("–ù–µ—Ç –ø–æ—Å–µ–≤–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è")
    
    # Next season button
    if st.button("‚è≠Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ–∑–æ–Ω—É", key="next_season"):
        st.session_state.farm_season += 1
        # Generate new weather
        st.session_state.farm_weather = {
            "temp": round(random.uniform(10, 40), 1),
            "rain": round(random.uniform(0, 12), 1),
            "description": random.choice(["–°–æ–ª–Ω–µ—á–Ω–æ", "–û–±–ª–∞—á–Ω–æ", "–î–æ–∂–¥–ª–∏–≤–æ", "–í–µ—Ç—Ä–µ–Ω–æ", "–¢—É–º–∞–Ω–Ω–æ"])
        }
        st.success(f"üåÖ –ù–∞—Å—Ç—É–ø–∏–ª {st.session_state.farm_season}-–π —Å–µ–∑–æ–Ω!")
        st.rerun()
    
    # Farm statistics
    st.markdown("#### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–µ—Ä–º—ã")
    
    if st.session_state.farm_season > 1:
        if st.session_state.farm_money > 1000:
            profit = st.session_state.farm_money - 1000
            st.success(f"üí∞ –ü—Ä–∏–±—ã–ª—å: +{profit}‚Ç∏ –∑–∞ {st.session_state.farm_season-1} —Å–µ–∑–æ–Ω–æ–≤")
        elif st.session_state.farm_money < 1000:
            loss = 1000 - st.session_state.farm_money
            st.error(f"üí∏ –£–±—ã—Ç–æ–∫: -{loss}‚Ç∏ –∑–∞ {st.session_state.farm_season-1} —Å–µ–∑–æ–Ω–æ–≤")
        else:
            st.info("üíº –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –Ω–æ–ª—å")
    
    # Tips for farming success
    with st.expander("üí° –°–æ–≤–µ—Ç—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ñ–µ—Ä–º–µ—Ä—Å—Ç–≤–∞", expanded=False):
        st.markdown("""
        üéØ **–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å–ø–µ—Ö–∞:**
        
        **üåæ –ö—É–ª—å—Ç—É—Ä—ã –∏ –∫–ª–∏–º–∞—Ç:**
        - –ü—à–µ–Ω–∏—Ü–∞: –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏ 15-25¬∞C –∏ —É–º–µ—Ä–µ–Ω–Ω—ã—Ö –æ—Å–∞–¥–∫–∞—Ö
        - –ö—É–∫—É—Ä—É–∑–∞: —Ç—Ä–µ–±—É–µ—Ç —Ç–µ–ø–ª–∞ (22-30¬∞C) –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –≤–ª–∞–≥–∏
        - –†–∏—Å: —Å–∞–º–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è, –Ω–æ –Ω—É–∂–Ω–æ –º–Ω–æ–≥–æ –≤–æ–¥—ã –∏ —Ç–µ–ø–ª–∞
        
        **üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞:**
        - –†–∏—Å –¥–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –ø—Ä–∏–±—ã–ª—å, –Ω–æ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã
        - –ü—à–µ–Ω–∏—Ü–∞ - —Å–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
        - –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–≥–æ–¥–æ–π –ø–µ—Ä–µ–¥ –ø–æ—Å–∞–¥–∫–æ–π –∏ —Å–±–æ—Ä–æ–º —É—Ä–æ–∂–∞—è
        
        **‚ö° –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã:**
        - –ù–µ –≤–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –≤—Å–µ –¥–µ–Ω—å–≥–∏ –≤ –æ–¥–Ω—É –∫—É–ª—å—Ç—É—Ä—É
        - –°–æ–±–∏—Ä–∞–π—Ç–µ —É—Ä–æ–∂–∞–π –ø—Ä–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–π –ø–æ–≥–æ–¥–µ
        - –ò–∑—É—á–∞–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏–π
        """)

# Beautiful footer
st.markdown("---")
st.markdown("""
<div class="footer">
    <div class="footer-content">
        <div class="footer-section">
            <h4 class="footer-title">üåæ –ê–≥—Ä–æ-–ü–æ–≥–æ–¥–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞</h4>
            <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∞–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö NASA.</p>
        </div>
        <div class="footer-section">
            <h4 class="footer-title">üî¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h4>
            <p>‚Ä¢ Python & Streamlit<br>‚Ä¢ Plotly –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏<br>‚Ä¢ NASA Weather API<br>‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</p>
        </div>
        <div class="footer-section">
            <h4 class="footer-title">üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h4>
            <p>‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–º–∞—Ç–∞<br>‚Ä¢ –ò–≥—Ä–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ<br>‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI<br>‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</p>
        </div>
    </div>
    <div style="text-align: center; margin-top: 1rem; padding-top: 1rem; border-top: 1px solid rgba(255,255,255,0.2);">
        <p style="margin: 0;">¬© 2024 –ê–≥—Ä–æ-–ü–æ–≥–æ–¥–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ | –°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤</p>
    </div>
</div>
""", unsafe_allow_html=True)
